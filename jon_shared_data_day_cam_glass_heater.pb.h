/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_SER_JON_SHARED_DATA_DAY_CAM_GLASS_HEATER_PB_H_INCLUDED
#define PB_SER_JON_SHARED_DATA_DAY_CAM_GLASS_HEATER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _ser_JonGuiDataDayCamGlassHeater {
    double temperature;
    bool status;
} ser_JonGuiDataDayCamGlassHeater;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ser_JonGuiDataDayCamGlassHeater_init_default {0, 0}
#define ser_JonGuiDataDayCamGlassHeater_init_zero {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ser_JonGuiDataDayCamGlassHeater_temperature_tag 1
#define ser_JonGuiDataDayCamGlassHeater_status_tag 2

/* Struct field encoding specification for nanopb */
#define ser_JonGuiDataDayCamGlassHeater_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   temperature,       1) \
X(a, STATIC,   SINGULAR, BOOL,     status,            2)
#define ser_JonGuiDataDayCamGlassHeater_CALLBACK NULL
#define ser_JonGuiDataDayCamGlassHeater_DEFAULT NULL

extern const pb_msgdesc_t ser_JonGuiDataDayCamGlassHeater_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ser_JonGuiDataDayCamGlassHeater_fields &ser_JonGuiDataDayCamGlassHeater_msg

/* Maximum encoded size of messages (where known) */
#define SER_JON_SHARED_DATA_DAY_CAM_GLASS_HEATER_PB_H_MAX_SIZE ser_JonGuiDataDayCamGlassHeater_size
#define ser_JonGuiDataDayCamGlassHeater_size     11

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
